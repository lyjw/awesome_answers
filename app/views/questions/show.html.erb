<h1><%= @question.title %></h1>

<p>
  <%= @question.body %>
</p>


<p>Created by: <%= @question.user_full_name.titleize %></p>

<p>View Count: <%= @question.view_count %></p>


<%# can? is a helper method from the CanCanCan gem to help us enforce authorization rule sin the views and controllers. The rule for :crud includes rules for :edit and :destroy  %>
<%# if @question.user == current_user %>
<% if can? :update, @question %>
  <%= link_to "Edit Question", edit_question_path(@question) %><br/>
<% end %>

<% if can? :destroy, @question %>
  <%# Rails mimics a Javascript delete request  %>
  <%# <a rel="nofollow" data-method="delete" href="/questions/10">Delete Question</a> %>
  <%= link_to "Delete Question", question_path(@question),
                                 method: :delete,
                                 data: {confirm: "Are you sure?"} %>
<% end %>

<div>
  <% if user_like %>
    <%= link_to "Un-like", question_like_path(@question, user_like), method: :delete %>
  <% else %>
    <%= link_to "Like", question_likes_path(@question), method: :post %>
  <% end %>

  (<%= @question.likes.count %>)

</div>

<hr>

<%= @answer.errors.full_messages.join(", ") %>

<%# Submits to answers_path by default as it is not persisted%>
<%# To override, use the :url option to specify a path: %>
<%# form_for @answer, url: question_answers_path(@question) do |f| %>
<%# Alternatively, use an array: %>
<%= form_for [@question, @answer] do |f| %>
  <%= f.text_area :body %>
  <%= f.submit %>
<% end %>

<% if @question.answers %>
  <h3>[ Answers ]</h3>
  <% @question.answers.each do |answer| %>
    <%= answer.body %> by <%= answer.user_full_name.titleize %>

    <% if can? :destroy, answer %>
      <%= link_to "Delete", question_answer_path(@question, answer),
                  data: { confirm: "Are you sure?"},
                  method: :delete %>
    <% end %>

    <hr>
  <% end %>
<% end %>
